<?xml version="1.0" encoding="utf-8" ?> 
<!--
  Copyright (C) 2002, 2003 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@frijters.net
  
-->
<root>
	<remappings>
		<class name="java.lang.Object" type="System.Object" modifiers="public">
			<constructor sig="()V" modifiers="public" />
			<method name="notifyAll" sig="()V" modifiers="public final">
				<redirect class="System.Threading.Monitor" name="PulseAll" sig="(Ljava.lang.Object;)V" type="static" />
			</method>
			<method name="notify" sig="()V" modifiers="public final">
				<redirect class="System.Threading.Monitor" name="Pulse" sig="(Ljava.lang.Object;)V" type="static" />
			</method>
			<method name="wait" sig="()V" modifiers="public final">
				<invokespecial>
					<call type="System.Threading.Monitor" name="Wait" sig="(Ljava.lang.Object;)Z" />
					<!-- For some reason, Wait returns a boolean -->
					<pop />
				</invokespecial>
				<invokevirtual>
					<call type="System.Threading.Monitor" name="Wait" sig="(Ljava.lang.Object;)Z" />
					<!-- For some reason, Wait returns a boolean -->
					<pop />
				</invokevirtual>
				<!--redirect class="System.Threading.Monitor" name="Wait" sig="(Ljava.lang.Object;)V" type="static" /-->
			</method>
			<method name="wait" sig="(J)V" modifiers="public final">
				<redirect class="java.lang.ObjectHelper" name="wait" sig="(Ljava.lang.Object;J)V" type="static" />
			</method>
			<method name="wait" sig="(JI)V" modifiers="public final">
				<redirect class="java.lang.ObjectHelper" name="wait" sig="(Ljava.lang.Object;JI)V" type="static" />
			</method>
			<method name="getClass" sig="()Ljava.lang.Class;" modifiers="public final">
				<invokespecial>
					<call type="System.Object" name="GetType" />
					<call type="NativeCode.java.lang.VMClass" name="getClassFromType" />
					<castclass class="java.lang.Class" />
				</invokespecial>
				<invokevirtual>
					<call type="System.Object" name="GetType" />
					<call type="NativeCode.java.lang.VMClass" name="getClassFromType" />
					<castclass class="java.lang.Class" />
				</invokevirtual>
				<!--redirect class="ObjectHelper" name="getClass" sig="(Ljava.lang.Object;)Ljava.lang.Object;" type="static" /-->
			</method>
			<method name="clone" sig="()Ljava.lang.Object;" modifiers="protected">
				<invokespecial>
					<!-- TODO if we already know statically that the type implements java.lang.Cloneable this check can be omitted -->
					<dup />
					<isinst type="java.lang.Cloneable" />
					<brtrue name="ok" />
					<newobj class="java.lang.CloneNotSupportedException" name="&lt;init&gt;" sig="()V" />
					<throw />
					<!--call type="ObjectHelper" name="throwCloneNotSupportedException" /-->
					<label name="ok" />
					<call type="System.Object" name="MemberwiseClone" />
				</invokespecial>
				<invokevirtual>
					<call type="ObjectHelper" name="virtualclone" />
				</invokevirtual>
			</method>
			<!-- virtual methods -->
			<!-- TODO every object that doesn't override toString or hashCode will now be called through these
				conditional constructs, this is unnecessary (and not very efficient), so I need to figure out a way
				to prevent this -->
			<method name="toString" sig="()Ljava.lang.String;" modifiers="public">
				<override name="ToString" />
				<invokespecial>
					<call class="java.lang.ObjectHelper" name="toStringSpecial" sig="(Ljava.lang.Object;)Ljava.lang.String;" />
				</invokespecial>
				<invokevirtual>
					<dup />
					<isinst type="System.Array" />
					<brfalse name="skip" />
					<call class="java.lang.ObjectHelper" name="toStringSpecial" sig="(Ljava.lang.Object;)Ljava.lang.String;" />
					<br name="end" />
					<label name="skip" />
					<callvirt type="System.Object" name="ToString" />
					<label name="end" />
				</invokevirtual>
			</method>
			<method name="hashCode" sig="()I" modifiers="public">
				<override name="GetHashCode" />
				<invokevirtual>
					<dup />
					<isinst type="System.String" />
					<brfalse name="skip" />
					<castclass type="System.String" />
					<call class="java.lang.StringHelper" name="hashCode" sig="(Ljava.lang.String;)I" />
					<br name="end" />
					<label name="skip" />
					<callvirt type="System.Object" name="GetHashCode" />
					<label name="end" />
				</invokevirtual>
			</method>
			<method name="equals" sig="(Ljava.lang.Object;)Z" modifiers="public">
				<override name="Equals" />
			</method>
			<method name="finalize" sig="()V" modifiers="protected">
				<override name="Finalize" />
			</method>
		</class>
		<class name="java.lang.String" type="System.String" modifiers="public final">
			<implements class="java.lang.Comparable" />
			<implements class="java.lang.CharSequence" />
			<implements class="java.io.Serializable" />
			<constructor sig="()V" modifiers="public">
				<!-- TODO -->
				<newobj>
					<ldstr value="" />
					<call type="System.String" name="Copy" />
				</newobj>
			</constructor>
			<constructor sig="([C)V" modifiers="public" />
			<constructor sig="([CII)V" modifiers="public" />
			<!-- Package private constructor, that we redirect to static helper -->
			<constructor sig="([CIIZ)V" modifiers="">
				<redirect class="java.lang.StringHelper" name="NewString" type="static" sig="([CIIZ)Ljava.lang.String;" />
			</constructor>
			<constructor sig="(Ljava.lang.String;)V" modifiers="public">
				<redirect class="System.String" name="Copy" type="static" sig="(Ljava.lang.String;)Ljava.lang.String;" />
			</constructor>
			<constructor sig="(Ljava.lang.StringBuffer;)V" modifiers="public">
				<redirect class="java.lang.StringHelper" name="NewString" type="static" sig="(Ljava.lang.StringBuffer;)Ljava.lang.String;" />
			</constructor>
			<constructor sig="([B)V" modifiers="public">
				<redirect class="java.lang.StringHelper" name="NewString" type="static" sig="([B)Ljava.lang.String;" />
			</constructor>
			<constructor sig="([BI)V" modifiers="public">
				<redirect class="java.lang.StringHelper" name="NewString" type="static" sig="([BI)Ljava.lang.String;" />
			</constructor>
			<constructor sig="([BII)V" modifiers="public">
				<redirect class="java.lang.StringHelper" name="NewString" type="static" sig="([BII)Ljava.lang.String;" />
			</constructor>
			<constructor sig="([BIII)V" modifiers="public">
				<redirect class="java.lang.StringHelper" name="NewString" type="static" sig="([BIII)Ljava.lang.String;" />
			</constructor>
			<constructor sig="([BLjava.lang.String;)V" modifiers="public">
				<redirect class="java.lang.StringHelper" name="NewString" type="static" sig="([BLjava.lang.String;)Ljava.lang.String;" />
			</constructor>
			<constructor sig="([BIILjava.lang.String;)V" modifiers="public">
				<redirect class="java.lang.StringHelper" name="NewString" type="static" sig="([BIILjava.lang.String;)Ljava.lang.String;" />
			</constructor>
			<method name="hashCode" sig="()I" modifiers="public">
				<redirect class="java.lang.StringHelper" type="static" sig="(Ljava.lang.String;)I" />
			</method>
			<method name="toString" sig="()Ljava.lang.String;" modifiers="public">
				<redirect name="ToString" />
			</method>
			<method name="valueOf" sig="(Z)Ljava.lang.String;" modifiers="public static">
				<redirect class="java.lang.StringHelper" />
			</method>
			<method name="valueOf" sig="(I)Ljava.lang.String;" modifiers="public static">
				<redirect class="java.lang.StringHelper" />
			</method>
			<method name="valueOf" sig="(J)Ljava.lang.String;" modifiers="public static">
				<redirect class="java.lang.StringHelper" />
			</method>
			<method name="valueOf" sig="(C)Ljava.lang.String;" modifiers="public static">
				<redirect class="java.lang.StringHelper" />
			</method>
			<method name="valueOf" sig="(F)Ljava.lang.String;" modifiers="public static">
				<redirect class="java.lang.StringHelper" />
			</method>
			<method name="valueOf" sig="(D)Ljava.lang.String;" modifiers="public static">
				<redirect class="java.lang.StringHelper" />
			</method>
			<method name="valueOf" sig="([C)Ljava.lang.String;" modifiers="public static">
				<redirect class="java.lang.StringHelper" />
			</method>
			<method name="valueOf" sig="([CII)Ljava.lang.String;" modifiers="public static">
				<redirect class="java.lang.StringHelper" />
			</method>
			<method name="valueOf" sig="(Ljava.lang.Object;)Ljava.lang.String;" modifiers="public static">
				<redirect class="java.lang.StringHelper" />
			</method>
			<method name="substring" sig="(I)Ljava.lang.String;" modifiers="public">
				<redirect name="Substring" />
			</method>
			<method name="length" sig="()I" modifiers="public">
				<redirect name="get_Length" />
			</method>
			<method name="charAt" sig="(I)C" modifiers="public">
				<redirect class="java.lang.StringHelper" type="static" sig="(Ljava.lang.String;I)C" />
			</method>
			<method name="substring" sig="(II)Ljava.lang.String;" modifiers="public">
				<redirect class="java.lang.StringHelper" type="static" sig="(Ljava.lang.String;II)Ljava.lang.String;" />
			</method>
			<method name="indexOf" sig="(I)I" modifiers="public">
				<redirect name="IndexOf" sig="(C)I" />
			</method>
			<method name="indexOf" sig="(II)I" modifiers="public">
				<redirect class="java.lang.StringHelper" type="static" sig="(Ljava.lang.String;CI)I" />
			</method>
			<method name="indexOf" sig="(Ljava.lang.String;)I" modifiers="public">
				<redirect name="IndexOf" />
			</method>
			<method name="indexOf" sig="(Ljava.lang.String;I)I" modifiers="public">
				<redirect class="java.lang.StringHelper" type="static" sig="(Ljava.lang.String;Ljava.lang.String;I)I" />
			</method>
			<method name="lastIndexOf" sig="(I)I" modifiers="public">
				<redirect name="LastIndexOf" sig="(C)I" />
			</method>
			<method name="lastIndexOf" sig="(II)I" modifiers="public">
				<redirect class="java.lang.StringHelper" type="static" sig="(Ljava.lang.String;CI)I" />
			</method>
			<method name="lastIndexOf" sig="(Ljava.lang.String;)I" modifiers="public">
				<redirect class="java.lang.StringHelper" type="static" sig="(Ljava.lang.String;Ljava.lang.String;)I" />
			</method>
			<method name="lastIndexOf" sig="(Ljava.lang.String;I)I" modifiers="public">
				<redirect class="java.lang.StringHelper" type="static" sig="(Ljava.lang.String;Ljava.lang.String;I)I" />
			</method>
			<method name="toCharArray" sig="()[C" modifiers="public">
				<redirect name="ToCharArray" />
			</method>
			<method name="getChars" sig="(II[CI)V" modifiers="public">
				<redirect class="java.lang.StringHelper" type="static" sig="(Ljava.lang.String;II[CI)V" />
			</method>
			<method name="startsWith" sig="(Ljava.lang.String;)Z" modifiers="public">
				<redirect name="StartsWith" />
			</method>
			<method name="startsWith" sig="(Ljava.lang.String;I)Z" modifiers="public">
				<redirect class="java.lang.StringHelper" type="static" sig="(Ljava.lang.String;Ljava.lang.String;I)Z" />
			</method>
			<method name="endsWith" sig="(Ljava.lang.String;)Z" modifiers="public">
				<redirect name="EndsWith" />
			</method>
			<method name="toUpperCase" sig="()Ljava.lang.String;" modifiers="public">
				<redirect class="java.lang.StringHelper" type="static" sig="(Ljava.lang.String;)Ljava.lang.String;" />
			</method>
			<method name="toUpperCase" sig="(Ljava.util.Locale;)Ljava.lang.String;" modifiers="public">
				<redirect class="java.lang.StringHelper" type="static" sig="(Ljava.lang.String;Ljava.util.Locale;)Ljava.lang.String;" />
			</method>
			<method name="toLowerCase" sig="()Ljava.lang.String;" modifiers="public">
				<redirect class="java.lang.StringHelper" type="static" sig="(Ljava.lang.String;)Ljava.lang.String;" />
			</method>
			<method name="toLowerCase" sig="(Ljava.util.Locale;)Ljava.lang.String;" modifiers="public">
				<redirect class="java.lang.StringHelper" type="static" sig="(Ljava.lang.String;Ljava.util.Locale;)Ljava.lang.String;" />
			</method>
			<method name="compareToIgnoreCase" sig="(Ljava.lang.String;)I" modifiers="public">
				<redirect class="java.lang.StringHelper" type="static" sig="(Ljava.lang.String;Ljava.lang.String;)I" />
			</method>
			<method name="equalsIgnoreCase" sig="(Ljava.lang.String;)Z" modifiers="public">
				<redirect class="java.lang.StringHelper" type="static" sig="(Ljava.lang.String;Ljava.lang.String;)Z" />
			</method>
			<method name="intern" sig="()Ljava.lang.String;" modifiers="public">
				<redirect type="static" name="Intern" sig="(Ljava.lang.String;)Ljava.lang.String;" />
			</method>
			<method name="compareTo" sig="(Ljava.lang.String;)I" modifiers="public">
				<redirect class="java.lang.StringHelper" type="static" sig="(Ljava.lang.String;Ljava.lang.String;)I" />
			</method>
			<method name="replace" sig="(CC)Ljava.lang.String;" modifiers="public">
				<redirect name="Replace" />
			</method>
			<method name="getBytes" sig="()[B" modifiers="public">
				<redirect class="java.lang.StringHelper" type="static" sig="(Ljava.lang.String;)[B" />
			</method>
			<method name="getBytes" sig="(Ljava.lang.String;)[B" modifiers="public">
				<redirect class="java.lang.StringHelper" type="static" sig="(Ljava.lang.String;Ljava.lang.String;)[B" />
			</method>
			<method name="subSequence" sig="(II)Ljava.lang.CharSequence;" modifiers="public">
				<redirect class="java.lang.StringHelper" type="static" name="substring" sig="(Ljava.lang.String;II)Ljava.lang.String;" />
			</method>
			<method name="trim" sig="()Ljava.lang.String;" modifiers="public">
				<redirect class="java.lang.StringHelper" type="static" sig="(Ljava.lang.String;)Ljava.lang.String;" />
			</method>
			<method name="regionMatches" sig="(ZILjava.lang.String;II)Z" modifiers="public">
				<redirect class="java.lang.StringHelper" type="static" sig="(Ljava.lang.String;ZILjava.lang.String;II)Z" />
			</method>
			<method name="regionMatches" sig="(ILjava.lang.String;II)Z" modifiers="public">
				<redirect class="java.lang.StringHelper" type="static" sig="(Ljava.lang.String;ILjava.lang.String;II)Z" />
			</method>
			<method name="getBytes" sig="(II[BI)V" modifiers="public">
				<redirect class="java.lang.StringHelper" type="static" sig="(Ljava.lang.String;II[BI)V" />
			</method>
			<method name="concat" sig="(Ljava.lang.String;)Ljava.lang.String;" modifiers="public">
				<redirect class="java.lang.StringHelper" type="static" sig="(Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;" />
			</method>
			<method name="copyValueOf" sig="([C)Ljava.lang.String;" modifiers="public static">
				<invokestatic>
					<newobj type="System.String" name=".ctor" sig="([C)V" />
				</invokestatic>
			</method>
			<method name="copyValueOf" sig="([CII)Ljava.lang.String;" modifiers="public static">
				<invokestatic>
					<newobj type="System.String" name=".ctor" sig="([CII)V" />
				</invokestatic>
			</method>
			<field name="CASE_INSENSITIVE_ORDER" sig="Ljava.util.Comparator;" modifiers="public static final">
				<redirect class="java.lang.StringHelper" type="static" name="getCaseInsensitiveOrder" sig="()Ljava.util.Comparator;" />
			</field>
			<!-- NOTE we're redirecting fields to static methods here!
				NOTE only reading fields can be redirected
			-->
			<field name="count" sig="I" modifiers="">
				<redirect class="java.lang.StringHelper" type="static" name="GetCountField" sig="(Ljava.lang.String;)I" />
			</field>
			<!-- Making a new char array instead of directly accessing the contents of the string, probably isn't
				as efficient as the coder of this construct wished for, but hey ;-) At least it works...
				TODO we should probably make StringBuffer a native class, to make it perform better
				NOTE since StringBuffer is remapped to StringBuilder now, these might not be needed anymore
			-->
			<method name="zeroBasedStringValue" sig="(Ljava.lang.String;)[C" modifiers="static">
				<redirect class="java.lang.StringHelper" name="GetValueField" />
			</method>
			<field name="value" sig="[C" modifiers="">
				<redirect class="java.lang.StringHelper" type="static" name="GetValueField" sig="(Ljava.lang.String;)[C" />
			</field>
			<field name="offset" sig="I" modifiers="">
				<redirect class="java.lang.StringHelper" type="static" name="GetOffsetField" sig="(Ljava.lang.String;)I" />
			</field>
		</class>
		<class name="java.lang.Throwable" type="System.Exception" modifiers="public">
			<implements class="java.io.Serializable" />
			<constructor sig="()V" modifiers="public">
				<invokespecial>
					<call type="ExceptionHelper" name="get_NullString" />
					<call type="System.Exception" name=".ctor" sig="(Ljava.lang.String;)V" />
				</invokespecial>
			</constructor>
			<constructor sig="(Ljava.lang.String;)V" modifiers="public">
				<invokespecial>
					<call type="ExceptionHelper" name="FilterMessage" />
					<call type="System.Exception" name=".ctor" sig="(Ljava.lang.String;)V" />
				</invokespecial>
			</constructor>
			<constructor sig="(Ljava.lang.String;Ljava.lang.Throwable;)V" modifiers="public">
				<invokespecial>
					<stloc name="x" type="System.Exception" />
					<call type="ExceptionHelper" name="FilterMessage" />
					<ldloc name="x" />
					<call type="System.Exception" name=".ctor" sig="(Ljava.lang.String;Ljava.lang.Throwable;)V" />
				</invokespecial>
			</constructor>
			<constructor sig="(Ljava.lang.Throwable;)V" modifiers="public">
				<invokespecial>
					<stloc name="x" type="System.Exception" />
					<ldloc name="x" />
					<call type="ExceptionHelper" name="GetMessageFromCause" />
					<ldloc name="x" />
					<call type="System.Exception" name=".ctor" sig="(Ljava.lang.String;Ljava.lang.Throwable;)V" />
				</invokespecial>
			</constructor>
			<method type="virtual" name="printStackTrace" sig="()V" modifiers="public">
				<redirect class="ExceptionHelper" sig="(Ljava.lang.Throwable;)V" type="static" />
			</method>
			<method type="virtual" name="printStackTrace" sig="(Ljava.io.PrintStream;)V" modifiers="public">
				<!-- NOTE both printStackTrace(Ljava.io.PrintStream;)V & printStackTrace(Ljava.io.PrintWriter;)V redirect
					to the same method, this is not a bug -->
				<redirect class="ExceptionHelper" sig="(Ljava.lang.Throwable;Ljava.lang.Object;)V" type="static" />
			</method>
			<method type="virtual" name="printStackTrace" sig="(Ljava.io.PrintWriter;)V" modifiers="public">
				<!-- NOTE both printStackTrace(Ljava.io.PrintStream;)V & printStackTrace(Ljava.io.PrintWriter;)V redirect
					to the same method, this is not a bug -->
				<redirect class="ExceptionHelper" sig="(Ljava.lang.Throwable;Ljava.lang.Object;)V" type="static" />
			</method>
			<method type="virtual" name="getMessage" sig="()Ljava.lang.String;" modifiers="public">
				<redirect class="ExceptionHelper" sig="(Ljava.lang.Throwable;)Ljava.lang.String;" type="static" />
			</method>
			<method type="virtual" name="getLocalizedMessage" sig="()Ljava.lang.String;" modifiers="public">
				<redirect class="ExceptionHelper" sig="(Ljava.lang.Throwable;)Ljava.lang.String;" type="static" />
			</method>
			<method type="virtual" name="fillInStackTrace" sig="()Ljava.lang.Throwable;" modifiers="public">
				<redirect class="ExceptionHelper" sig="(Ljava.lang.Throwable;)Ljava.lang.Throwable;" type="static" />
			</method>
			<method type="virtual" name="initCause" sig="(Ljava.lang.Throwable;)Ljava.lang.Throwable;" modifiers="public">
				<redirect class="ExceptionHelper" sig="(Ljava.lang.Throwable;Ljava.lang.Throwable;)Ljava.lang.Throwable;" type="static" />
			</method>
			<method type="virtual" name="getCause" sig="()Ljava.lang.Throwable;" modifiers="public">
				<redirect class="ExceptionHelper" sig="(Ljava.lang.Throwable;)Ljava.lang.Throwable;" type="static" />
			</method>
			<method type="virtual" name="getStackTrace" sig="()[Ljava.lang.StackTraceElement;" modifiers="public">
				<redirect class="ExceptionHelper" sig="(Ljava.lang.Throwable;)[Ljava.lang.StackTraceElement;" type="static" />
			</method>
			<method type="virtual" name="setStackTrace" sig="([Ljava.lang.StackTraceElement;)V" modifiers="public">
				<redirect class="ExceptionHelper" sig="(Ljava.lang.Throwable;[Ljava.lang.StackTraceElement;)V" type="static" />
			</method>
			<method type="virtual" name="toString" sig="()Ljava.lang.String;" modifiers="public">
				<redirect class="ExceptionHelper" sig="(Ljava.lang.Throwable;)Ljava.lang.String;" type="static" />
			</method>
		</class>
		<class name="java.lang.Comparable" type="System.IComparable" modifiers="public interface">
			<method name="compareTo" sig="(Ljava.lang.Object;)I" modifiers="public">
				<override name="CompareTo" />
			</method>
		</class>
		<!-- TODO java.lang.StackTraceElement shouldn't be here, but it should be represented by a different TypeWrapper (that can take
			a .NET type and present it as a Java type -->
		<class name="java.lang.StackTraceElement" type="java.lang.StackTraceElement" modifiers="public final">
			<method name="getFileName" sig="()Ljava.lang.String;" modifiers="public" />
			<method name="getLineNumber" sig="()I" modifiers="public" />
			<method name="getClassName" sig="()Ljava.lang.String;" modifiers="public" />
			<method name="getMethodName" sig="()Ljava.lang.String;" modifiers="public" />
			<method name="isNativeMethod" sig="()Z" modifiers="public" />
			<method name="toString" sig="()Ljava.lang.String;" modifiers="public">
				<redirect name="ToString" />
			</method>
			<method name="equals" sig="(Ljava.lang.Object;)Z" modifiers="public">
				<redirect name="Equals" />
			</method>
			<method name="hashCode" sig="()I" modifiers="public">
				<redirect name="GetHashCode" />
			</method>
		</class>
	</remappings>
	<nativeMethods>
		<class name="java.lang.Runtime">
			<method name="execInternal" sig="([Ljava.lang.String;[Ljava.lang.String;Ljava.io.File;)Ljava.lang.Process;">
				<ldarg_0 />
				<ldarg_1 />
				<ldarg_2 />
				<ldarg_3 />
				<call class="ikvm.lang.DotNetProcess" name="execInternal" sig="(Ljava.lang.Runtime;[Ljava.lang.String;[Ljava.lang.String;Ljava.io.File;)Ljava.lang.Process;" />
				<ret />
			</method>
		</class>
		<class name="java.lang.StringHelper">
			<method name="constructCaseInsensitiveOrder" sig="()Ljava.util.Comparator;">
				<newobj class="java.lang.String$CaseInsensitiveComparator" name="&lt;init&gt;" sig="()V" />
				<ret />
			</method>
		</class>
		<class name="ikvm.lang.CIL">
			<method name="unbox_int" sig="(Ljava.lang.Object;)I">
				<ldarg_0 />
				<unbox type="System.Int32" />
				<ldind_i4 />
				<ret />
			</method>
		</class>
	</nativeMethods>
</root>
